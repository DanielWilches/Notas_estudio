Docker: Proyecto Open Source para empaquetar y trasportat, administrar y ejecutar cualquier aplicación como un contenedor ligero.


Docker no tiene hypervisor si no que usa las funcionalidades del kernel para encapsular el sistema, los contenedores se comportan como máquinas independientes

EL objetivo es que una app funcione en cuealquier hardware ya que todo viene contenido y entonces puede ser trasladado sin problema.


Contenedores: Conjunto de tecnologias que se agrupan y aislan entre si aplicaiones o grupos y aislar entre si aplicaciones o grupo de aplicaciones que se ejecuatan sobre un mismo núcleo el sistema operativo.
	
    -Namespaces: Permite a la aplicación que corre en un 		contenedor de Docker tener una vista de los recursos del 		sistema operativo.
    -Cgroups: Permite limitar y medir los recursos que se 		encuentran disponibles en el sistema operativo.
    -Chroot: Permite tener en el contenedor una vista de un 		sistema “falso” para el mismo, es decir, crea su propio 		entorno de ejecución con su propio root y home.
    -Logging: Linea de comandos.
    -Consola.

Algunas de las características más notables de un contenedor son:

-Los contenedores son más livianos (ya que trabajan 	   		directamente sobre el Kernel) que las maquinas virtuales.
-No es necesario instalar un sistema operativo por contenedor.
-Menor uso de los recursos de la máquina.
-Mayor cantidad de contenedores por equipo físico.
-Mejor portabilidad.
-Escalado horizontal: Multiples instancias configuradas en un 		      balanceador de carga.

COMANDOS INICIALES:

docker : Lista de comandos
docker version : Version del demonio y del cliente.
docker info : Información del sistema.
docker ps : Ver estado de contenedores que estan corrienedo.
docker run : Crear in contenedor 
docker run --name name 
docker rm id_container : Eliminar contenedor.
docker stats : Ver estado de los contenedores.


IMAGENES: Son plantillas que incluyen los binarios y las librerias necesariar para correr la aplicación.

Dockerfile: Archivo de texto plano que contiene los comandos necesarios para automatizar la creación de una imagen para ser usada en eninstancias especificas.
  
  Comandos;
  FROM : IMGANE
  MAINTEINER : QUIEN MANTIENE EL CONTENEDOR.
  RUN : EJECUTA INSTRUCCIONES.
  ADD O COPY : AÑADE FICHEROS.
  ENV : VARIABLES DE ENTORNO.
  EXPOSE : INDICAR EL PUERTO.
  ENTRYPOINT/CMD : DEFINE EL PROCESO QUE SE EJECUTA, POR 	DEFECTO /	bin/sh -c
  
Tipos de arquitecturas:
Monolitica: autonoma  es solo un servicio.
Microservicios: Ofrece que cada componente este aislado.


---Intalación linux
-sudo -su
-Instalar open ssh
-configurarlo y con nano (ctr+0 + intro +ctr+x)
-/etc/init.d/ssh restar
-ssh.service.

-docker compose desde el host 
 -ssh nombre@ip
 -sudo su 
  -estamos en la maquina
 -ip a
 -apt installa docker.io
 -docker
 -docker run
  -docker componse
 -apt install docker-compose -y 
 
-Crear volumenes.
	docker volume -help
	docker run -dti --name web -p 80:80 -v data:/user/local/apache2
	
	- docker inspect



------------------------------------------------------------------
DOCKER CON FAZT CODE:

--instalar

https://docs.docker.com/engine/install/ubuntu/

 sudo apt update
 
 sudo apt-get install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
	
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  
  echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  
  
  sudo apt-get update
  
  sudo apt-get install docker-ce docker-ce-cli containerd.io
  
  apt-cache madison docker-ce
  
  sudo docker run hello-world
  
------EJECUCIONES:

	DOCKER IMAGE:
	Plantilla donde estan las configuraciones de los program
	as que ejecutaremos despues en otra máquina luego
	y llevamos las imagenes para que se pueden usar en 
	el espacio de tranajo.
	(contiene todo para que la app se pueda ejecutar)
	
	DOCKER FILE: Texto plano donde esta la configuración

-----INSTALAR IMAGENES docker hub podemos encontrar las image.
 
 docker run hello-world
 
 docker images : lista de las imagenes.
 
 Imagen ubuntu 
 
 Buscar imagenes: docker search name
 
 docker pull ubuntu 
 
 Ejecutar:
 
  docker run ubuntu echo 'hello world'
  
  Ingresar:
  
  docker run -it ubuntu bash  (-it para que sea interactivo)
  
  docker ps : ver procesos 
  
  En el puedo installar las herramientas que quiera.
  
  CONTENEDORES: Una imagen esta dentro de un contenedor.
  y estos los podemos ejecutar sin problema en una misma
  máquina.
  
  exit salimos del contenedor.
  
  
  docker ps : lista de contenedores ejecutandose.
  docker ps -a : historial.
  docker rm id or name : eliminamos contenedor.
  docker images : ver imagenes
  docker ps -a : los pausados.
  docker start id or container name : iniciar
  docker stop id or container name : pausalro
  
  NGINX: Servidor http
  
  docker pull nginx 
  
  -El queda corriendo y entonces toca desde otra consola
   ver el proceso.
   
  docker run -p 3000:80 nginx : 
  			toma el puerto del contenedor y lo 
  			hace accesible a puertos
  docker run -p 80:80 -d nginx : permite ejecutarlo en 2 plano.
  
  docker stop id corto primeros 3 dígitos.
  
  docker rm id : para eliminar
  docker ps -aq : solo ids
  docker rm $(ps -aq) : elimina todo.
  
  
----COMO SE EJECUTAN LOS CONTENEDORES.
 Puede ejecutar el contenedor en multiples puertos.
 
 docker run -o 80:80 -p 3000:80 -d nginx
  
 docker run -p 80:80 -d httpd : 
 instalamos apache y lop ejecutamos.
 
 docker run -d -p 3309:3309 --name mydatabase mysql : 
 Instalar mysql.
 
 docker rm $(docker ps -aq) -f : eliminar hasta los contenedo.
 
 
 -VARIABLES DE ENTORNO A UN CONTENEDOR
 docker run -d -p 33007:33007 --name mydatabase -e 
 MYSQL_ROOT_PASSWORD=password mysql
 
 Formatear: Salidas personalozadas
 docker ps --format="IDt/t{{.ID}}/nName:/t{{.Names}}"
 
 CREAR ARCHICO DOCKER FILE:
 nano /.bashrc
 
 al final creear la variable 
 #Docker_format
 export DOCKER_FORMAT= el formarto que deseamos.
 
 docker ps --formar=$DOCKER_FORMT
 
----IMAGENES:
 docker rmi name : elimino imagen
 docker images : imagenes
 docker images -aq : ids imagenes.
 docker rmi $(docker images -aq) -f :eliminar todas las image
 
 Copiar archivos para que se ejecuten:
  
  vamos a la carpeta de mi equipo:
  
  pwd, nos deja ver la ruta
  
  -Mandamos la ruta para que ejecue la app en el servidor.
  
  docker run -d -p 80:80 --name website -v 
  ${pwd}:/usr/share/nginx/htnl:ro nginx
  
  -v : ejecuta los archivos así los cambiemos.
  Conectarme en el contenedor:
  dockert exec -ot website bash
  Crear archivos:
  SOlo se puede leer.:ro
  Sin :ro puedo editar archivos en el servidor.
   
   
   Si queremos desplegarla o enviarla a otro desarrollador:
   
   DockerFile:
   FROM nginx:1.17
   WORKDIR/usr/share/nginx/html
   COPY . . (copie eso en ese workdir)
   
   
   -Generar el docker file para la imagen:
   docker build -t name .
   
   docker images : ahora veremos la imagen creada
   docker run name 7000:80 -d --name miimagen name 
   
   Subirla a docker hub:
   docker build -t nignameDockerHub/name .
   
   docker login
   
   docker push imageName
   
--DOCKER COMPOSE:
	ARCHIVO DE CONDIGURACIÓN PARA CREAR CONTENEDORES.
	
	  
  Permite conectar contenedores entre ellos.
  Por ejemplo usar mysql con wordpress.
  
  Leer el archivo desde la imagen  y creara todo lo que esta ahí
  dentro.
  
  docker-compose up -d
  docker-compose ps
  
    
   
   
   
   
  
  
  
   
   
  
 
 
 
 
 
 
  
  
   
 
 
 	
 	

	
	
  
	
	
    




